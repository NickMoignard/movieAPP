/* 	TMDBService()
		
		FLAGS
			downloading new page of films?
			downloading movie posters?



		func 
		to_check_if_user _has_performed_this_search_before_returning_a_page_of_search_results()

			takes a search dict (either returned from users last search or from the search picker view)
			has a callback which will return the correct search parameters inside a dict
			check firebase for specific search dict> increment page no > update firebase

			inside callBack we can perform the GET request

		when application launches
			~ Retrieve last search dict from firebase


		set the downloading flag
		do all of this on a background thread:
			download a page
			count number of seen films and begin downloads of posters
			recursively call self until no of films to expect is greater than 10
		return the NoFilmsToExpect


	mutating func updateTheMovieStructArray
		donload page of results() {
			20 films in JSON Array
				Let seenFilmsForPageOfTMDBData = 0
				for each in array {
					check film id againts users seen films
						if !seen {
							create a movie struct object. enusre it is on a background thread
								insideCallBack( self.noFilmsPostersDownloading--)
						} else {
							seenFilmsForPageOfTMDBData++
						}
				self.noFilmPostersDownloading += resultsArray.count - seenFilmsForPageOfTMDBData
			}
		}

		


	create a function that returns are a single movie struct
		then checks the films array


	movie struct array maintance func
		get no inside buffered array
		get no of posters being downloaded

		

		if noFilmsOnDownload + noFilmsInBufferedArray < MIN_MOVIES && !alreadyDownloadingAPage {
			updateArray()		
		} else if (noFilmsOnDownload + noFilmsInBufferedArray <= 3){
			present loading card until we have 10 films in array
			updateArray()
		}

Create an animation viewController for when the films are downloading
*/



firebase

searchs : {
  user_id : {
    search_uid : {
      page_no: Int,
      sort_by: String,
      optional_param: String,
      optional_param: String,
      optional_param: String
    },
    ...
  },
  ...
}

users : {
  user_id : {
    email: String,
    name: String
  },
  ...
}

viewed_cards: {
  user_id : {
    tmdb_id: true,
    ...
    }
}

dislike_lists: {
  user_id : {
    tmdb_id: true,
    ...
  }
}

watchlists: {
  user_id : {
    tmdb_id: true,
    ...
  }
}

reviews : {
  user_id : {
    uid: {
      rating: Int,
      tmdb_id: Int
    }
    ...
  }
  ...
}





























